// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ExitRateChanged extends ethereum.Event {
  get params(): ExitRateChanged__Params {
    return new ExitRateChanged__Params(this);
  }
}

export class ExitRateChanged__Params {
  _event: ExitRateChanged;

  constructor(event: ExitRateChanged) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get exitRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewPIC extends ethereum.Event {
  get params(): NewPIC__Params {
    return new NewPIC__Params(this);
  }
}

export class NewPIC__Params {
  _event: NewPIC;

  constructor(event: NewPIC) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pic(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bond(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get exitRate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TOGA__getCurrentPICInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    return map;
  }
}

export class TOGA extends ethereum.SmartContract {
  static bind(address: Address): TOGA {
    return new TOGA("TOGA", address);
  }

  ERC777_SEND_GAS_LIMIT(): BigInt {
    let result = super.call(
      "ERC777_SEND_GAS_LIMIT",
      "ERC777_SEND_GAS_LIMIT():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_ERC777_SEND_GAS_LIMIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ERC777_SEND_GAS_LIMIT",
      "ERC777_SEND_GAS_LIMIT():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentPIC(token: Address): Address {
    let result = super.call(
      "getCurrentPIC",
      "getCurrentPIC(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toAddress();
  }

  try_getCurrentPIC(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCurrentPIC",
      "getCurrentPIC(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentPICInfo(token: Address): TOGA__getCurrentPICInfoResult {
    let result = super.call(
      "getCurrentPICInfo",
      "getCurrentPICInfo(address):(address,uint256,int96)",
      [ethereum.Value.fromAddress(token)]
    );

    return new TOGA__getCurrentPICInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getCurrentPICInfo(
    token: Address
  ): ethereum.CallResult<TOGA__getCurrentPICInfoResult> {
    let result = super.tryCall(
      "getCurrentPICInfo",
      "getCurrentPICInfo(address):(address,uint256,int96)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TOGA__getCurrentPICInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getDefaultExitRateFor(param0: Address, bondAmount: BigInt): BigInt {
    let result = super.call(
      "getDefaultExitRateFor",
      "getDefaultExitRateFor(address,uint256):(int96)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(bondAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getDefaultExitRateFor(
    param0: Address,
    bondAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDefaultExitRateFor",
      "getDefaultExitRateFor(address,uint256):(int96)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(bondAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxExitRateFor(param0: Address, bondAmount: BigInt): BigInt {
    let result = super.call(
      "getMaxExitRateFor",
      "getMaxExitRateFor(address,uint256):(int96)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(bondAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMaxExitRateFor(
    param0: Address,
    bondAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxExitRateFor",
      "getMaxExitRateFor(address,uint256):(int96)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(bondAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minBondDuration(): BigInt {
    let result = super.call(
      "minBondDuration",
      "minBondDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minBondDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minBondDuration",
      "minBondDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get host_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minBondDuration_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeExitRateCall extends ethereum.Call {
  get inputs(): ChangeExitRateCall__Inputs {
    return new ChangeExitRateCall__Inputs(this);
  }

  get outputs(): ChangeExitRateCall__Outputs {
    return new ChangeExitRateCall__Outputs(this);
  }
}

export class ChangeExitRateCall__Inputs {
  _call: ChangeExitRateCall;

  constructor(call: ChangeExitRateCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newExitRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeExitRateCall__Outputs {
  _call: ChangeExitRateCall;

  constructor(call: ChangeExitRateCall) {
    this._call = call;
  }
}

export class TokensReceivedCall extends ethereum.Call {
  get inputs(): TokensReceivedCall__Inputs {
    return new TokensReceivedCall__Inputs(this);
  }

  get outputs(): TokensReceivedCall__Outputs {
    return new TokensReceivedCall__Outputs(this);
  }
}

export class TokensReceivedCall__Inputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get value5(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class TokensReceivedCall__Outputs {
  _call: TokensReceivedCall;

  constructor(call: TokensReceivedCall) {
    this._call = call;
  }
}
