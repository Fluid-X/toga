// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NewPIC extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("lastPic", Value.fromBytes(Bytes.empty()));
    this.set("newPic", Value.fromBytes(Bytes.empty()));
    this.set("bond", Value.fromBigInt(BigInt.zero()));
    this.set("exitRate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewPIC entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NewPIC entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NewPIC", id.toString(), this);
    }
  }

  static load(id: string): NewPIC | null {
    return changetype<NewPIC | null>(store.get("NewPIC", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get lastPic(): Bytes {
    let value = this.get("lastPic");
    return value!.toBytes();
  }

  set lastPic(value: Bytes) {
    this.set("lastPic", Value.fromBytes(value));
  }

  get newPic(): Bytes {
    let value = this.get("newPic");
    return value!.toBytes();
  }

  set newPic(value: Bytes) {
    this.set("newPic", Value.fromBytes(value));
  }

  get bond(): BigInt {
    let value = this.get("bond");
    return value!.toBigInt();
  }

  set bond(value: BigInt) {
    this.set("bond", Value.fromBigInt(value));
  }

  get exitRate(): BigInt {
    let value = this.get("exitRate");
    return value!.toBigInt();
  }

  set exitRate(value: BigInt) {
    this.set("exitRate", Value.fromBigInt(value));
  }
}

export class ExitRateChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("transactionHash", Value.fromBytes(Bytes.empty()));
    this.set("token", Value.fromBytes(Bytes.empty()));
    this.set("pic", Value.fromBytes(Bytes.empty()));
    this.set("oldExitRate", Value.fromBigInt(BigInt.zero()));
    this.set("newExitRate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExitRateChanged entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ExitRateChanged entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ExitRateChanged", id.toString(), this);
    }
  }

  static load(id: string): ExitRateChanged | null {
    return changetype<ExitRateChanged | null>(store.get("ExitRateChanged", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get pic(): Bytes {
    let value = this.get("pic");
    return value!.toBytes();
  }

  set pic(value: Bytes) {
    this.set("pic", Value.fromBytes(value));
  }

  get oldExitRate(): BigInt {
    let value = this.get("oldExitRate");
    return value!.toBigInt();
  }

  set oldExitRate(value: BigInt) {
    this.set("oldExitRate", Value.fromBigInt(value));
  }

  get newExitRate(): BigInt {
    let value = this.get("newExitRate");
    return value!.toBigInt();
  }

  set newExitRate(value: BigInt) {
    this.set("newExitRate", Value.fromBigInt(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newPicBids(): string | null {
    let value = this.get("newPicBids");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set newPicBids(value: string | null) {
    if (!value) {
      this.unset("newPicBids");
    } else {
      this.set("newPicBids", Value.fromString(<string>value));
    }
  }
}

export class PIC extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromBytes(Bytes.empty()));
    this.set("token", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PIC entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PIC entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PIC", id.toString(), this);
    }
  }

  static load(id: string): PIC | null {
    return changetype<PIC | null>(store.get("PIC", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }
}
